// plugin.cpp : Defines the entry point for the DLL application.
//

#include "stdafx.h"
#include "IPlugin.h"

#include <math.h>
#include <cmath>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>//to use cout
#include <algorithm>

using namespace std;


////////////////////////////////////////////////////////////////////////
// A concrete plugin implementation
////////////////////////////////////////////////////////////////////////

// Photo-Reactor Plugin class

//****************************************************************************
//This code has been generated by the Mediachance photo reactor Code generator.


#define AddParameter(N,S,V,M1,M2,T,D) {strcpy (pParameters[N].m_sLabel,S);pParameters[N].m_dValue = V;pParameters[N].m_dMin = M1;pParameters[N].m_dMax = M2;pParameters[N].m_nType = T;pParameters[N].m_dSpecialValue = D;}

#define GetValue(N) (pParameters[N].m_dValue)
#define GetValueY(N) (pParameters[N].m_dSpecialValue)

#define SetValue(N,V) {pParameters[N].m_dValue = V;}

#define GetBOOLValue(N) ((BOOL)(pParameters[N].m_dValue==pParameters[N].m_dMax))

// if it is not defined, then here it is
//#define RGB(r,g,b) ((COLORREF)(((BYTE)(r)|((WORD)((BYTE)(g))<<8))|(((DWORD)(BYTE)(b))<<16)))

#define PARAM_RADIUS	0
#define PARAM_INTENSITY	1
#define PARAM_INTENSITYTYPE	2

#define NUMBER_OF_USER_PARAMS 3

#define MIN(a,b) (((a)<(b))?(a):(b))
#define MAX(a,b) (((a)>(b))?(a):(b))


class Plugin1 : public IPlugin	
{
public:

		//Plugin Icon:
	//you can add your own icon by creating 160x100 png file, naming it the same as plugin dll and then placing it in the plugins folder
	//otherwise a generic icon will be use


	//this is the title of the box in workspace. it should be short
	const char* GetTitle () const
	{
		return "Andy's Paint";
	}
	
	// this will appear in the help pane, you can put your credits and short info
	const char* GetDescription () const
	{
		return "Paint Effect Based on GIMP's Oilify Plugin. Using Luminance as a guide, repeat the most common color found in a 2D kernel of Pixels.  This Plugin calculates luminance several different ways to provide different ways to paint the image. The higher the intensity level the smaller the Brush strokes are, the larger the Radius, the larger area that is considered when calculating colors.";
	}

	// BASIC PARAMETERS
	// number of inputs 0,1 or 2
	int GetInputNumber ()
	{
		return 1;
	}

	// number of outputs 0 or 1
	int GetOutputNumber ()
	{
		return 1;
	}

	int GetBoxColor ()
	{
		return RGB(44,78,119);
	}

	int GetTextColor ()
	{
		return RGB(165,236,255);
	}

	// width of the box in the workspace
	// valid are between 50 and 100
	int GetBoxWidth ()
	{
		return 100;
	}

	// set the flags
	// see the interface builder
	// ex: nFlag = FLAG_FAST_PROCESS | FLAG_HELPER;

	//FLAG_NONE same as zero	Default, no other flags set
	//FLAG_UPDATE_IMMEDIATELY	It is very fast process that can update immediately. When user turns the sliders on UI the left display will update
	//							Use Update Immediately only for fast and single loop processes, for example Desaturate, Levels.
	//FLAG_HELPER				It is an helper object. Helper objects will remain visible in Devices and they can react to mouse messages. Example: Knob, Monitor, Bridge Pin
	//FLAG_BINDING				Binding object, attach to other objects and can change its binding value. It never goes to Process_Data functions.  Example: Knob, Switch, Slider
	//FLAG_DUMMY				It is only for interface but never process any data. Never goes to Process_Data functions. Example: Text note
	//FLAG_SKIPFINAL			Process data only during designing, doesn't process during final export. Example: Monitor, Vectorscope 
	//FLAG_LONGPROCESS			Process that takes > 1s to finish. Long Process will display the Progress dialog and will prevent user from changing values during the process.
	//FLAG_NEEDSIZEDATA		    Process need to know size of original image, the zoom and what part of image is visible in the preview. When set the plugin will receive SetSizeData
	//FLAG_NEEDMOUSE			Process will receive Mouse respond data from the workplace. This is only if your object is interactive, for example Knob, Slider

	int GetFlags ()
	{
		// it is fast process
		int nFlag = FLAG_LONGPROCESS;
		//int nFlag = FLAG_NONE;// placed temp
		
		return nFlag;
	}


	// User Interface Build
	// there is maximum 29 Parameters

	int GetUIParameters (UIParameters* pParameters)
	{

		// label, value, min, max, type_of_control, special_value
		// use the UI builder in the software to generate this

		AddParameter( PARAM_RADIUS ,"Radius", 6.0, 1.0, 50.0, TYPE_SLIDER, 0.0);
		AddParameter( PARAM_INTENSITY ,"Intensity", 25.0, 5.0, 255.0, TYPE_SLIDER, 0.0);

		AddParameter( PARAM_INTENSITYTYPE ,"Average Intensity|Luminance 1|Luminance 2|Luminance 3|Luminance 4|Luminance 5|Luminance 6|Luminance 7|Luminance 8", 0, 0, 8, TYPE_ONEOFMANY, 0);
		return NUMBER_OF_USER_PARAMS;
	}
	
	//http://www.codeproject.com/Articles/471994/OilPaintEffect
	virtual void Process_Data (BYTE* pBGRA_out,BYTE* pBGRA_in, int nWidth, int nHeight, UIParameters* pParameters)
	{
		//List of Parameters
		double dRadius = GetValue(PARAM_RADIUS);// used to grab radius from control
		double dintensity = GetValue(PARAM_INTENSITY);
		int intensitytype = (int)GetValue(PARAM_INTENSITYTYPE);

		int radius = (int)dRadius;//convert radius to an interger
		int intensity = (int)dintensity;

		int IntensityCount[256];
		int SumR[256];
		int SumG[256];
		int SumB[256];

		//BYTE* RArray = new BYTE[elementsinarray]; // kernel array
				//BYTE* GArray = new BYTE[elementsinarray]; // kernel array
				//BYTE* BArray = new BYTE[elementsinarray]; // kernel array

		BYTE* outputarray=new BYTE[nWidth * nHeight * 4];// this is our tempory buffer to store image blurred horizonally





		//marches throught kernel in 2d
		for(int y = 0; y < nHeight; y++)
		{
			for(int x = 0; x < nWidth; x++)
			{
				//sets the array to all 0, clearing out the histograms
				memset( IntensityCount, 0, sizeof(IntensityCount) );
				memset( SumR, 0, sizeof(SumR) );
				memset( SumG, 0, sizeof(SumG) );
				memset( SumB, 0, sizeof(SumB) );

				//This is our Kernel
				//accumulate colors
				for(int i = max(0, x - radius); i <= MIN(nWidth - 1, x + radius); i++)
				{
					for(int j = max(0, y - radius); j <= MIN(nHeight - 1, y + radius); j++)
					{
						//this slides / moves along the kernel to collect the neighboring pixels
						//int redKernelSlider   = pBGRA_in[(i + j * nWidth) * 4 + CHANNEL_R];
						//int greenKernelSlider = pBGRA_in[(i + j * nWidth) * 4 + CHANNEL_G];
						//int blueKernelSlider  = pBGRA_in[(i + j * nWidth) * 4 + CHANNEL_B];
						//this slides / moves along the kernel to collect the neighboring pixels

						int redKernelSlider = pBGRA_in[(i + j * nWidth) * 4 + CHANNEL_R];
						int greenKernelSlider = pBGRA_in[(i + j * nWidth) * 4 + CHANNEL_G];
						int blueKernelSlider = pBGRA_in[(i + j * nWidth) * 4 + CHANNEL_B];

						float CurIntensity = 0;

						// Find intensity of RGB value and apply intensity level.
						if (intensitytype == 0)
						{
							CurIntensity =  ( ( ( redKernelSlider + greenKernelSlider + blueKernelSlider ) / 3.0 ) * intensity ) / 255;
						}

						if (intensitytype == 1)
						{
							CurIntensity =  ( ( ( redKernelSlider * .299) + (greenKernelSlider * .587) + (blueKernelSlider * .114 ) ) * intensity ) / 255;
						}

						if (intensitytype == 2)
						{
							CurIntensity =  ( ( ( redKernelSlider * .2126) + (greenKernelSlider * .7152) + (blueKernelSlider * .0722 )  ) * intensity ) / 255;
						}

						if (intensitytype == 3)
						{
							CurIntensity =  ( ( ( redKernelSlider * .202) + (greenKernelSlider * .701) + (blueKernelSlider * .087 )  ) * intensity ) / 255;
						}

						if (intensitytype == 4)
						{
							CurIntensity =  ( ( ( redKernelSlider * .3346) + (greenKernelSlider * .6654) + (blueKernelSlider * .0161 )  ) * intensity ) / 255;
						}

						if (intensitytype == 5)
						{
							CurIntensity =  ( ( ( redKernelSlider * .0161) + (greenKernelSlider * .3346) + (blueKernelSlider * .6654 )  ) * intensity ) / 255;
						}

						if (intensitytype == 6)
						{
							CurIntensity =  ( ( ( redKernelSlider * .114) + (greenKernelSlider * .299) + (blueKernelSlider * .587 ) ) * intensity ) / 255;
						}

						if (intensitytype == 7)
						{
							CurIntensity =  ( ( ( redKernelSlider * .587) + (greenKernelSlider * .114) + (blueKernelSlider * .299 ) ) * intensity ) / 255;
						}

						if (intensitytype == 8)
						{
							CurIntensity =  ( ( ( redKernelSlider * .7152) + (greenKernelSlider * .0722) + (blueKernelSlider * .2126 )  ) * intensity ) / 255;
						}


							if( CurIntensity > 255 ){CurIntensity = 255;}






						int k = CurIntensity;
						IntensityCount[k]++;

						SumR[k] = SumR[k] + redKernelSlider;
						SumG[k] = SumG[k] + greenKernelSlider;
						SumB[k] = SumB[k] + blueKernelSlider;


						/*
						char sBuffer1[200]; sprintf(sBuffer1,"radius = %d" "\n" "size = %d" "\n" "x = %d" "\n" "y = %d" "\n" "i = %d" "\n""\n" "nR = %d" "\n" "nCurIntensity = %d"
						,
						radius, size, x, y, i, nR, nCurIntensity);MessageBox(NULL,sBuffer1,"Variable Info", MB_OK);//
						*/
					}//end J
				}//end I

				int OutRed = 0;
				int OutGreen = 0;
				int OutBlue = 0;


				int CurMax = 0;
				int MaxIndex = 0;

				for( int i = 0; i < 256; i++ ) //reads the histogram
				{
					if( IntensityCount[i] > CurMax )
					{
						CurMax = IntensityCount[i];
						MaxIndex = i;
					}
				}

				OutRed = SumR[MaxIndex] / CurMax;
				OutGreen = SumG[MaxIndex] / CurMax;
				OutBlue = SumB[MaxIndex] / CurMax;


				

				{//output
					pBGRA_out[(x + y * nWidth) * 4 + CHANNEL_R] = OutRed;
					pBGRA_out[(x + y * nWidth) * 4 + CHANNEL_G] = OutGreen;
					pBGRA_out[(x + y * nWidth) * 4 + CHANNEL_B] = OutBlue;
				}//end output


			}//end X
		}//end Y

#pragma region			//test for proof that the image is blurred with median
/*
		for (int x = 0; x< nWidth; x++)
		{
			for (int y = 0; y< nHeight; y++)
			{
				int nIdx = x * 4 + y * 4 * nWidth;
				
				int nR = outputarray [nIdx + CHANNEL_R];
				int nG = outputarray [nIdx + CHANNEL_G];
				int nB = outputarray [nIdx + CHANNEL_B];

				pBGRA_out[nIdx + CHANNEL_R] = nR;
				pBGRA_out[nIdx + CHANNEL_G] = nG;
				pBGRA_out[nIdx + CHANNEL_B] = nB;				
			}
		}
*/
#pragma endregion

		//CPP Check does not like this
		delete [] (BYTE*) outputarray;
		//delete [] IntensityCount;
		//delete [] SumR;
		//delete [] SumG;
		//delete [] SumB;
	}//end routine

						


	// actual processing function for 2 inputs
	//********************************************************************************
	// all buffers are the same size
	// don't change the IN buffers or things will go bad
	// the pBGRA_out comes already with copied data from pBGRA_in1
	virtual void Process_Data2 (BYTE* pBGRA_out, BYTE* pBGRA_in1, BYTE* pBGRA_in2, int nWidth, int nHeight, UIParameters* pParameters)
	{

	}


	//*****************Drawing functions for the BOX *********************************
	//how is the drawing handled
	//DRAW_AUTOMATICALLY	the main program will fully take care of this and draw a box, title, socket and thumbnail
	//DRAW_SIMPLE_A			will draw a box, title and sockets and call CustomDraw
	//DRAW_SIMPLE_B			will draw a box and sockets and call CustomDraw
	//DRAW_SOCKETSONLY      will call CustomDraw and then draw sockets on top of it
	
	// highlighting rectangle around is always drawn except for DRAW_SOCKETSONLY

	virtual int GetDrawingType ()
	{
		int nType = DRAW_AUTOMATICALLY	;

		return nType;
	}


	// Custom Drawing
	// custom drawing function called when drawing type is different than DRAW_AUTOMATICALLY
	// it is not always in real pixels but scaled depending on where it is drawn
	// the scale could be from 1.0 to > 1.0
	// so you always multiply the position, sizes, font size, line width with the scale
	
	virtual void CustomDraw (HDC hDC, int nX,int nY, int nWidth, int nHeight, float scale, BOOL bIsHighlighted, UIParameters* pParameters)
	{
	}


	//************ Optional Functions *****************************************************************************************
	// those functions are not necessary for normal effect, they are mostly for special effects and objects


	// Called when FLAG_HELPER set. 
	// When UI data changed (user turned knob) this function will be called as soon as user finish channging the data
	// You will get the latest parameters and also which parameter changed
	// Normally for effects you don't have to do anything here because you will get the same parameters in the process function
	// It is only for helper objects that may not go to Process Data 
	BOOL UIParametersChanged (UIParameters* pParameters, int nParameter)
	{
		
		return FALSE;
	}

	// when button is pressed on UI, this function will be called with the parameter and sub button (for multi button line)
	BOOL UIButtonPushed (int nParam, int nSubButton, UIParameters* pParameters)
	{

		return TRUE;
	}


	// Called when FLAG_NEEDSIZEDATA set
	// Called before each calculation (Process_Data)
	// If your process depends on a position on a frame you may need the data to correctly display it because Process_Data receives only a preview crop
	// Most normal effects don't depend on the position in frame so you don't need the data
	// Example: drawing a circle at a certain position requires to know what is displayed in preview or the circle will be at the same size and position regardless of zoom
	
	// Note: Even if you need position but you don't want to mess with the crop data, just ignore it and pretend the Process_Data are always of full image (they are not). 
	// In worst case this affects only preview when using zoom. The full process image always sends the whole data

	// nOriginalW, nOriginalH - the size of the original - full image. If user sets Resize on input - this will be the resized image
	// nPreviewW, nPreviewH   - this is the currently processed preview width/height - it is the same that Process_Data will receive
	//                        - in full process the nPreviewW, nPreviewH is equal nOriginalW, nOriginalH
	// Crop X1,Y1,X2,Y2       - relative coordinates of preview crop rectangle in <0...1>, for full process they are 0,0,1,1 (full rectangle)	
	// dZoom                  - Zoom of the Preview, for full process the dZoom = 1.0
	void SetSizeData(int nOriginalW, int nOriginalH, int nPreviewW, int nPreviewH, double dCropX1, double dCropY1, double dCropX2, double dCropY2, double dZoom)
	{

		// so if you need the position and zoom, this is the place to get it.
		// Note: because of IBM wisdom the internal bitmaps are on PC always upside down, but the coordinates are not


	}


	// ***** Mouse handling on workplace *************************** 
	// only if FLAG_NEEDMOUSE is set
	//****************************************************************
	//this is for special objects that need to receive mouse, like a knob or slider on workplace
	// normally you use this for FLAG_BINDING objects

	// in coordinates relative to top, left corner of the object (0,0)
	virtual BOOL MouseButtonDown (int nX, int nY, int nWidth, int nHeight, UIParameters* pParameters)
	{
		
		// return FALSE if not handled
		// return TRUE if handled
		return FALSE;
	}

	// in coordinates relative to top, left corner of the object (0,0)
	virtual BOOL MouseMove (int nX, int nY, int nWidth, int nHeight, UIParameters* pParameters)
	{
	

		return FALSE;
	}
	
	// in coordinates relative to top, left corner of the object (0,0)
	virtual BOOL MouseButtonUp (int nX, int nY, int nWidth, int nHeight, UIParameters* pParameters)
	{
		
		// Note: if we changed data and need to recalculate the flow we need to return TRUE

		// return FALSE if not handled
		// return TRUE if handled
		
		return TRUE;
	}


};

extern "C"
{
	// Plugin factory function
	__declspec(dllexport) IPlugin* Create_Plugin ()
	{
		//allocate a new object and return it
		return new Plugin1 ();
	}
	
	// Plugin cleanup function
	__declspec(dllexport) void Release_Plugin (IPlugin* p_plugin)
	{
		//we allocated in the factory with new, delete the passed object
		delete p_plugin;
	}
	
}


// this is the name that will appear in the object library
extern "C" __declspec(dllexport) char* GetPluginName()
{
	return "Andys Paint Effect";	
}


// This MUST be unique string for each plugin so we can save the data

extern "C" __declspec(dllexport) char* GetPluginID()
{
	return "com.lumafilters.painteffect.oilify";
}


// category of plugin, for now the EFFECT go to top library box, everything else goes to the middle library box
extern "C" __declspec(dllexport) int GetCategory()
{
		
	return CATEGORY_EFFECT;
	
}